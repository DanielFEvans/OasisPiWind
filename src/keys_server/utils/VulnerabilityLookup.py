__all__ = ['VulnerabilityLookup']

# (c) 2013-2016 Oasis LMF Ltd.  Software provided for early adopter evaluation only.
import logging

import oasis_utils


class VulnerabilityLookup(object):
    '''
    Functionality to perform a vulnerability lookup.
    '''

    def __init__(self, vulnerabilities_file=None):
        self._lookup_data = dict()

        if vulnerabilities_file:
            with open(vulnerabilities_file, 'r') as f:
                dr = csv.DictReader(f)
                for r in dr:
                    key = self.get_key(r['COVERAGE'], r['CLASS_1'], r['CLASS_2'])
                    val = int(r['VULNERABILITY_ID'])
                    self._lookup_data[key] = val


    def set_lookup_data(self, data):
    '''
    Set the lookup data.
    Args:
        data: the lookup data.
    '''
        self._lookup_data = dict()
        for rec in data:
            key = self.get_key(rec['coverage'], rec['class_1'], rec['class_2'])
            self._lookup_data[key] = rec['id']


    def get_key(self, coverage, class_1, class_2):
        '''
        Create the lookup key.
        Args:
        coverage: the coverage
        class_1: the class 1 value
        class_2: the class 2 value
        '''
        #        return '{}-{}-{}'.format(coverage, class_1, class_2)
        return '{}-{}-{}'.format(coverage, class_1, class_2)


    def do_lookup_location(self, location):
        '''
        Perform a lookup on a specified location.
        Args:
            location: the location to lookup.
        Return:
            Lookup result
        '''
        logging.debug("Looking up location.", )

        coverage = location['coverage']
        class_1 = location['class_1']
        class_2 = location['class_2']
        key = self.get_key(coverage, class_1, class_2)

        status = oasis_utils.KEYS_STATUS_NOMATCH
        vulnerability_id = None
        message = ''

        try:
            vulnerability_id = self._lookup_data[key]
        except KeyError:
            pass
        else:
            status = oasis_utils.KEYS_STATUS_SUCCESS

        return {
            'status': status,
            'vulnerability_id': vulnerability_id,
            'message': None
        }
