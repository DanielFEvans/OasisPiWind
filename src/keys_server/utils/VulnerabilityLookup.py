__all__ = ['VulnerabilityLookup']

# (c) 2013-2016 Oasis LMF Ltd.  Software provided for early adopter evaluation only.
import logging

from .LookupStatus import *

class VulnerabilityLookup(object):
    '''
    Functionality to perform a Vulnerability lookup.
    '''

    def __init__(self):
        self._lookup_data = dict()


    def get_key(self, coverage, class_1, class_2):
        '''
        Create the lookup key.
        Args:
        coverage: the coverage
        class_1: the class 1 value
        class_2: the class 2 value
        '''
        #        return '{}-{}-{}'.format(coverage, class_1, class_2)
        return '{}-{}-{}'.format(coverage, class_1, class_2)


    def set_lookup_data(self, data):
        '''
        Set the lookup data.
        Args:
            data: the lookup data.
        '''
        for value in data:
            key = self.get_key(value['coverage'], value['class_1'], value['class_2'])
            self._lookup_data[key] = value['id']


    def do_lookup_location(self, location):
        '''
        Perform a lookup on a specified location.
        Args:
            location: the location to lookup.
        Return:
            Lookup result
        '''
        logging.debug("Looking up location.", )

        coverage = location['coverage']
        class_1 = location['class_1']
        class_2 = location['class_2']
        key = self.get_key(coverage, class_1, class_2)

        status = STATUS_NOMATCH
        vulnerability_id = None
        message = None

        if key in self._lookup_data:
            status = STATUS_SUCCESS
            vulnerability_id = self._lookup_data[key]

        return {
            'status': status,
            'vulnerability_id': vulnerability_id,
            'message': None
        }
